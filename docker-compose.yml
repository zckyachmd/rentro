services:
  web:
    container_name: rentro_web
    image: nginx:stable
    ports:
      - "${APP_HTTP_PORT:-8888}:80"
    volumes:
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - app_shared:/var/www/html:ro
    healthcheck:
      test: ["CMD-SHELL", "nginx -t >/dev/null 2>&1 || exit 1; pid=$$(cat /var/run/nginx.pid 2>/dev/null) || exit 1; kill -0 $$pid 2>/dev/null || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    depends_on:
      app:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - rentro_net

  app:
    container_name: rentro_app
    build:
      context: .
      target: app-runner
    volumes:
      - app_shared:/var/www/html
    environment:
      APP_KEY: ${APP_KEY}
      APP_URL: ${APP_URL:-http://localhost:${APP_HTTP_PORT:-8888}}
      DB_HOST: db
      DB_PORT: 5432
      DB_DATABASE: ${DB_DATABASE:-app}
      DB_USERNAME: ${DB_USERNAME:-app}
      DB_PASSWORD: ${DB_PASSWORD:-secret}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_CLIENT: phpredis
      INERTIA_SSR_ENABLED: ${INERTIA_SSR_ENABLED:-true}
      INERTIA_SSR_URL: ${INERTIA_SSR_URL:-http://ssr:13714}
    healthcheck:
      test: ["CMD", "php", "-r", "exit((int)!@fsockopen('127.0.0.1', (int)(getenv('FPM_PORT')?:9000)));"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 20s
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
      ssr:
        condition: service_healthy
    restart: unless-stopped
    stop_grace_period: 15s
    networks:
      - rentro_net

  redis:
    container_name: rentro_redis
    image: redis:7
    command: ["redis-server","--save","","--appendonly","no"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - rentro_net

  db:
    container_name: rentro_db
    image: postgres:16
    ports:
      - "${DB_EXPOSE_PORT:-5432}:5432"
    environment:
      POSTGRES_DB: ${DB_DATABASE:-app}
      POSTGRES_USER: ${DB_USERNAME:-app}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secret}
    volumes: ["pg_data:/var/lib/postgresql/data"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U \"$${POSTGRES_USER}\" -d \"$${POSTGRES_DB}\""]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - rentro_net

  ssr:
    container_name: rentro_ssr
    build:
      context: .
      target: ssr-runner
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').request({host:'127.0.0.1',port:process.env.PORT||13714,path:'/'},r=>process.exit(0)).on('error',()=>process.exit(1)).end()"]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 15s
    environment:
      NODE_ENV: production
      PORT: 13714
      NODE_OPTIONS: --max-old-space-size=256
    restart: unless-stopped
    networks:
      - rentro_net

  horizon:
    container_name: rentro_horizon
    build:
      context: .
      target: app-runner
    entrypoint: ["/bin/sh","-lc"]
    command: "su -s /bin/sh -c 'php artisan horizon' www-data"
    volumes:
      - app_shared:/var/www/html
    environment:
      APP_KEY: ${APP_KEY}
      DB_HOST: db
      DB_PORT: 5432
      DB_DATABASE: ${DB_DATABASE:-app}
      DB_USERNAME: ${DB_USERNAME:-app}
      DB_PASSWORD: ${DB_PASSWORD:-secret}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_CLIENT: phpredis
      QUEUE_CONNECTION: ${QUEUE_CONNECTION:-redis}
    depends_on:
      app:
        condition: service_healthy
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - rentro_net

  scheduler:
    container_name: rentro_scheduler
    build:
      context: .
      target: app-runner
    entrypoint: ["/bin/sh","-lc"]
    command: "su -s /bin/sh -c 'while true; do php artisan schedule:run --no-interaction; sleep 60; done' www-data"
    volumes:
      - app_shared:/var/www/html
    environment:
      APP_KEY: ${APP_KEY}
      DB_HOST: db
      DB_PORT: 5432
      DB_DATABASE: ${DB_DATABASE:-app}
      DB_USERNAME: ${DB_USERNAME:-app}
      DB_PASSWORD: ${DB_PASSWORD:-secret}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_CLIENT: phpredis
      QUEUE_CONNECTION: ${QUEUE_CONNECTION:-redis}
    depends_on:
      app:
        condition: service_healthy
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - rentro_net

volumes:
  app_shared:
  pg_data:

networks:
  rentro_net:
    driver: bridge
